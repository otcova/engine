
flags: overflow, equal


0b000000	none
0b010000	reset // clear all memory (ram, ra, rb, d0, d1, d2, d3 and poiner)
0b100000	end
0b110000	pause

---- MEMORY ----
0b000001	clear ra // ra = 0
0b010001	clear rb // rb = 0
0b100001	clear d0 // d0 = 0
0b110001	swap // ra, rb

0b000010	set ra // ra = n
0b010010	set rb // rb = n
0b100010	store rb // ram[rb] = ra
0b110010	store d0 // ram[d0] = ra

0b000011	set d0 // d0 = n
0b010011	set d1 // d1 = n
0b100011	set d2 // d2 = n
0b110011	set d3 // d3 = n

0b000100	get d0 // ra = d0
0b010100	get d1 // ra = d1
0b100100	get d2 // ra = d2
0b110100	get d3 // ra = d3

0b000101	move d0 // d0 = ra
0b010101	move d1 // d1 = ra
0b100101	move d2 // d2 = ra
0b110101	move d3 // d3 = ra

0b000110	load ra rb // ra = ram[rb]
0b010110	load rb ra // rb = ram[ra]
0b100110	load ra d0 // ra = ram[d0]
0b110110	load rb d0 // rb = ram[d0]

----- ALU -----
0b000111	++ra // incress 1 ra (set flag overflow)
0b010111	--ra // decress 1 ra (set flag negative)
0b100111	++d0 // incress 1 d0 (set flag overflow)
0b110111	--d0 // decress 1 d0 (set flag negative)

0b001000	add // ra = ra + rb
0b011000	sub // ra = ra - rb
0b101000	mult // ra = ra * rb
0b111000	div // ra = ra / rb

0b001001	rand // ra = random
0b011001	and // ra = ra & rb
0b101001	or // ra = ra | rb
0b111001	xor // ra = ra ^ rb

----- IF -----
0b001010	cmp // compare ra, rb
0b011010	jmp // jump to n
0b101010	get arrows-flags // ra = arrows-flags
0b111010	get arrows-flags rb // rb = arrows-flags

0b001011	jnf // jump if no flag
0b011011	je // jump if equal flag
0b101011	jo // jump if overflow flag
0b111011	jeo // jump to n if overflow or equal

0b001100	cjnf // comp and jump if no flag
0b011100	cje // comp and jump if equal flag
0b101100	cjo // comp and jump if overflow flag
0b111100	cjeo // comp and jump to n if overflow or equal

---- INPUT ----
0b001101	in-arrow-up // jumps if no input
0b011101	in-arrow-right // jumps if no input
0b101101	in-arrow-down // jumps if no input
0b111101	in-arrow-left // jumps if no input

--- OUTPUT ---
0b001110	print // outs ra to display A
0b011110	led ra // set ra to point display
0b101110	led rb // set rb to point display
0b111110	frame // clears point display for a new frame



def d1 TAIL-LEN
def d2 SNAKE-DIR
def d3 COIN-POS

def r0 SNAKE HEAD
def rx TAIL POS


#START:
	set SNAKE-DIR
	0b1
	
UPDATE-COIN-POS:
	rand
	move COIN-POS
GAME-LOOP:
CHECK-COIN-POS:
	get TAIL-LEN
	move d0
	get COIN-POS
	led ra
	swap
CHECK-COIN-LOOP:
	load ra d0
	led ra
	++d0
	store d0
	--d0
	cje
	UPDATE-COIN-POS
	--d0
	jo
	END-CHECK-COIN
	jmp 
	CHECK-COIN-LOOP
END-CHECK-COIN:
	frame
	
#GET-INPUT:
	get arrows-flags
	clear rb
	cje
	MOVE-SNAKE 
	move SNAKE-DIR
	none
	none
	none
	none
MOVE-SNAKE:
	clear d0
	load rb d0
	get SNAKE-DIR
	add
	store d0

#GET-COIN-SCORE:
	clear ra
	load rb ra
	get COIN-POS
	cje
	GET-COIN-SCORE-CONTINUE
	jmp
	END-COIN-SCORE
GET-COIN-SCORE-CONTINUE:
	get TAIL-LEN
	++ra
	move TAIL-LEN
	jmp
	UPDATE-COIN-POS
END-COIN-SCORE:

	jmp 
	GAME-LOOP
	
#END